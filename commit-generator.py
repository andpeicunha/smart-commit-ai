#!/usr/bin/env python3

import subprocess
from g4f.client import Client
from g4f.Provider import Blackbox
import textwrap
import sys
import os
import re


def get_git_diff():
    try:
        diff = subprocess.check_output(["git", "diff", "--cached"], universal_newlines=True)
        return diff
    except subprocess.CalledProcessError:
        return None


def get_recent_commits(num=3):
    try:
        commits = subprocess.check_output(["git", "log", f"-{num}", "--pretty=format:%B"], universal_newlines=True)
        return commits
    except subprocess.CalledProcessError:
        return None


def clean_blackbox_message(message):
    # Remove a linha com a mensagem promocional do Blackbox
    blackbox_pattern = r"Generated by BLACKBOX\.AI.*?\n"
    cleaned_message = re.sub(blackbox_pattern, "", message, flags=re.IGNORECASE)

    # Remove linhas em branco extras no in√≠cio
    cleaned_message = cleaned_message.lstrip()

    return cleaned_message


def generate_commit_message(diff, recent_commits):
    PROMPT = textwrap.dedent(
        """
        Voc√™ √© um especialista em Git. 
        Analise o diff e crie uma mensagem de commit
        Siga essas regras:

        Formato:
        type: short end clear description (max 50 caracteres em ingl√™s)

        - Bullet points opcionais para mais detalhes (se necess√°rio e sempre em Portugu√™s Brasil)
        - M√°ximo 2-3 bullets, cada um com m√°ximo 100 caracteres

        Tipos permitidos:
        - feat: nova funcionalidade
        - fix: corre√ß√£o de bug
        - docs: documenta√ß√£o
        - style: formata√ß√£o, ponto-e-v√≠rgula, etc
        - refactor: refatora√ß√£o de c√≥digo
        - test: adi√ß√£o/modifica√ß√£o de testes
        - chore: build, configs, etc
        - perf: melhorias de performance

        Regras:
        1. Use verbos no imperativo
        2. N√£o termine com ponto
        3. Seja espec√≠fico mas conciso
        4. Se tiver v√°rios arquivos, foque na mudan√ßa principal

        Retorne APENAS a mensagem, sem explica√ß√µes ou aspas.

        Refer√™ncia de commits recentes do repo:
        $recent_commits

        Altera√ß√µes (diff):
        $diff
        """
    )

    try:
        client = Client()
        providers = [Blackbox]
        last_error = None

        for provider in providers:
            try:
                response = client.chat.completions.create(
                    model="claude-3.5-sonnet",
                    provider=provider,
                    messages=[
                        {"role": "system", "content": PROMPT},
                        {"role": "user", "content": f"Recent commits:\n{recent_commits}"},
                        {"role": "user", "content": f"Changes:\n{diff}"},
                    ],
                )
                message = response.choices[0].message.content.strip()
                return clean_blackbox_message(message)
            except Exception as e:
                last_error = e
                continue

        if last_error:
            raise last_error

    except Exception as e:
        print(f"Erro ao gerar mensagem: {str(e)}")
        print("\nTentando provider alternativo...")

        try:
            from g4f.Provider import Bing

            response = client.chat.completions.create(
                model="gpt-4",
                provider=Bing,
                messages=[
                    {"role": "system", "content": PROMPT},
                    {"role": "user", "content": f"Recent commits:\n{recent_commits}"},
                    {"role": "user", "content": f"Changes:\n{diff}"},
                ],
            )
            message = response.choices[0].message.content.strip()
            return clean_blackbox_message(message)
        except Exception as e:
            print(f"Erro no provider alternativo: {str(e)}")
            return None


def main():
    print("üîç Analisando altera√ß√µes...")

    diff = get_git_diff()
    if not diff:
        print("‚ùå N√£o existem mudan√ßas staged para commit")
        sys.exit(1)

    recent_commits = get_recent_commits()

    print("üí≠ Gerando sugest√£o de commit...")
    commit_msg = generate_commit_message(diff, recent_commits)

    if commit_msg:
        print("\nüìù Sugest√£o de mensagem:\n")
        print(commit_msg)

        response = input("\nDeseja usar esta mensagem? [Y/n] ").strip().lower()

        if response in ["y", "yes", ""]:
            tmp_file = os.path.expanduser("~/.git_commit_msg_tmp")
            with open(tmp_file, "w") as f:
                f.write(commit_msg)

            try:
                subprocess.run(["git", "commit", "-F", tmp_file], check=True)
                print("‚úÖ Commit realizado com sucesso!")
            except subprocess.CalledProcessError:
                print("‚ùå Erro ao realizar o commit")

            os.remove(tmp_file)
        else:
            print("‚ùå Commit cancelado")
    else:
        print("‚ùå N√£o foi poss√≠vel gerar a mensagem")
        sys.exit(1)


if __name__ == "__main__":
    main()
